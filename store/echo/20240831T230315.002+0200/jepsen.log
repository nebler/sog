2024-08-31 23:03:15,041{GMT}	INFO	[jepsen test runner] jepsen.core: Test version 191c2f6a778c00c8075ef0bd65a070818839f543 (plus uncommitted changes)
2024-08-31 23:03:15,041{GMT}	INFO	[jepsen test runner] jepsen.core: Command line:
lein run test -w echo --bin target/release/sog --node-count 1 --time-limit 10
2024-08-31 23:03:15,079{GMT}	INFO	[jepsen test runner] jepsen.core: Running test:
{:args []
 :remote
 #jepsen.control.retry.Remote{:remote #jepsen.control.scp.Remote{:cmd-remote #jepsen.control.sshj.SSHJRemote{:concurrency-limit 6,
                                                                                                             :conn-spec nil,
                                                                                                             :client nil,
                                                                                                             :semaphore nil},
                                                                 :conn-spec nil},
                              :conn nil}
 :log-net-send false
 :node-count 1
 :availability nil
 :max-txn-length 4
 :concurrency 1
 :db
 #object[maelstrom.db$db$reify__16142
         "0x1660bba7"
         "maelstrom.db$db$reify__16142@1660bba7"]
 :max-writes-per-key 16
 :leave-db-running? false
 :name "echo"
 :logging-json? false
 :start-time
 #object[org.joda.time.DateTime "0x771c4015" "2024-08-31T23:03:15.002+02:00"]
 :nemesis-interval 10
 :net
 #object[maelstrom.net$jepsen_net$reify__15251
         "0x34d776eb"
         "maelstrom.net$jepsen_net$reify__15251@34d776eb"]
 :client
 #object[maelstrom.workload.echo$client$reify__16863
         "0x60a3a0fa"
         "maelstrom.workload.echo$client$reify__16863@60a3a0fa"]
 :barrier
 #object[java.util.concurrent.CyclicBarrier
         "0x17734113"
         "java.util.concurrent.CyclicBarrier@17734113"]
 :log-stderr false
 :pure-generators true
 :ssh {:dummy? true}
 :rate 5
 :checker
 #object[jepsen.checker$compose$reify__11881
         "0x27aa700"
         "jepsen.checker$compose$reify__11881@27aa700"]
 :argv
 ("test"
  "-w"
  "echo"
  "--bin"
  "target/release/sog"
  "--node-count"
  "1"
  "--time-limit"
  "10")
 :nemesis
 (jepsen.nemesis.ReflCompose
  {:fm {:start-partition 0,
        :stop-partition 0,
        :kill 1,
        :start 1,
        :pause 1,
        :resume 1},
   :nemeses [#unprintable "jepsen.nemesis.combined$partition_nemesis$reify__16416@d15f98a"
             #unprintable "jepsen.nemesis.combined$db_nemesis$reify__16397@704c3ca2"]})
 :nodes ["n0"]
 :test-count 1
 :latency {:mean 0, :dist :constant}
 :bin "target/release/sog"
 :generator
 (jepsen.generator.TimeLimit
  {:limit 10000000000,
   :cutoff nil,
   :gen (jepsen.generator.Any
         {:gens [(jepsen.generator.OnThreads
                  {:f #{:nemesis},
                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                           "0x6d4bdb75"
                                           "jepsen.generator.context$make_thread_filter$lazy_filter__9167@6d4bdb75"],
                   :gen nil})
                 (jepsen.generator.OnThreads
                  {:f #jepsen.generator.context.AllBut{:element :nemesis},
                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                           "0x1dc47df3"
                                           "jepsen.generator.context$make_thread_filter$lazy_filter__9167@1dc47df3"],
                   :gen (jepsen.generator.Stagger
                         {:dt 400000000,
                          :next-time nil,
                          :gen (jepsen.generator.EachThread
                                {:fresh-gen #object[maelstrom.workload.echo$workload$fn__16882
                                                    "0x256a25a8"
                                                    "maelstrom.workload.echo$workload$fn__16882@256a25a8"],
                                 :context-filters #object[clojure.core$promise$reify__8591
                                                          "0x68f67bbd"
                                                          {:status :pending,
                                                           :val nil}],
                                 :gens {}})})})]})})
 :log-net-recv false
 :os
 #object[maelstrom.net$jepsen_os$reify__15254
         "0x5bd585a5"
         "maelstrom.net$jepsen_os$reify__15254@5bd585a5"]
 :time-limit 10
 :workload :echo
 :consistency-models [:strict-serializable]
 :topology :grid}

2024-08-31 23:03:16,008{GMT}	INFO	[jepsen node n0] maelstrom.net: Starting Maelstrom network
2024-08-31 23:03:16,008{GMT}	INFO	[jepsen test runner] jepsen.db: Tearing down DB
2024-08-31 23:03:16,009{GMT}	INFO	[jepsen test runner] jepsen.db: Setting up DB
2024-08-31 23:03:16,010{GMT}	INFO	[jepsen node n0] maelstrom.service: Starting services: (lin-kv lin-tso lww-kv seq-kv)
2024-08-31 23:03:16,011{GMT}	INFO	[jepsen node n0] maelstrom.db: Setting up n0
2024-08-31 23:03:16,011{GMT}	INFO	[jepsen node n0] maelstrom.process: launching target/release/sog []
2024-08-31 23:03:16,258{GMT}	INFO	[jepsen test runner] jepsen.core: Relative time begins now
2024-08-31 23:03:16,268{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:echo	"Please echo 80"
2024-08-31 23:03:16,271{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:echo	{:msg_id 1, :in_reply_to 1, :type "echo_ok", :echo "Please echo 80"}
2024-08-31 23:03:16,420{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:echo	"Please echo 90"
2024-08-31 23:03:16,421{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:echo	{:msg_id 2, :in_reply_to 2, :type "echo_ok", :echo "Please echo 90"}
2024-08-31 23:03:16,736{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:echo	"Please echo 7"
2024-08-31 23:03:16,739{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:echo	{:msg_id 3, :in_reply_to 3, :type "echo_ok", :echo "Please echo 7"}
2024-08-31 23:03:16,856{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:echo	"Please echo 27"
2024-08-31 23:03:16,859{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:echo	{:msg_id 4, :in_reply_to 4, :type "echo_ok", :echo "Please echo 27"}
2024-08-31 23:03:16,900{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:echo	"Please echo 109"
2024-08-31 23:03:16,903{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:echo	{:msg_id 5, :in_reply_to 5, :type "echo_ok", :echo "Please echo 109"}
2024-08-31 23:03:17,161{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:echo	"Please echo 76"
2024-08-31 23:03:17,163{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:echo	{:msg_id 6, :in_reply_to 6, :type "echo_ok", :echo "Please echo 76"}
2024-08-31 23:03:17,445{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:echo	"Please echo 35"
2024-08-31 23:03:17,446{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:echo	{:msg_id 7, :in_reply_to 7, :type "echo_ok", :echo "Please echo 35"}
2024-08-31 23:03:17,834{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:echo	"Please echo 50"
2024-08-31 23:03:17,843{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:echo	{:msg_id 8, :in_reply_to 8, :type "echo_ok", :echo "Please echo 50"}
2024-08-31 23:03:18,091{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:echo	"Please echo 119"
2024-08-31 23:03:18,095{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:echo	{:msg_id 9, :in_reply_to 9, :type "echo_ok", :echo "Please echo 119"}
2024-08-31 23:03:18,388{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:echo	"Please echo 72"
2024-08-31 23:03:18,392{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:echo	{:msg_id 10, :in_reply_to 10, :type "echo_ok", :echo "Please echo 72"}
2024-08-31 23:03:18,590{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:echo	"Please echo 30"
2024-08-31 23:03:18,593{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:echo	{:msg_id 11, :in_reply_to 11, :type "echo_ok", :echo "Please echo 30"}
2024-08-31 23:03:18,881{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:echo	"Please echo 103"
2024-08-31 23:03:18,889{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:echo	{:msg_id 12, :in_reply_to 12, :type "echo_ok", :echo "Please echo 103"}
2024-08-31 23:03:19,161{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:echo	"Please echo 23"
2024-08-31 23:03:19,164{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:echo	{:msg_id 13, :in_reply_to 13, :type "echo_ok", :echo "Please echo 23"}
2024-08-31 23:03:19,469{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:echo	"Please echo 29"
2024-08-31 23:03:19,472{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:echo	{:msg_id 14, :in_reply_to 14, :type "echo_ok", :echo "Please echo 29"}
2024-08-31 23:03:19,479{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:echo	"Please echo 124"
2024-08-31 23:03:19,480{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:echo	{:msg_id 15, :in_reply_to 15, :type "echo_ok", :echo "Please echo 124"}
2024-08-31 23:03:19,584{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:echo	"Please echo 101"
2024-08-31 23:03:19,587{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:echo	{:msg_id 16, :in_reply_to 16, :type "echo_ok", :echo "Please echo 101"}
2024-08-31 23:03:19,599{GMT}	INFO	[Jepsen shutdown hook] jepsen.core: Downloading DB logs before JVM shutdown...
